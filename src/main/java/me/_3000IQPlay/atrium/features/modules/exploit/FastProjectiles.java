package me._3000IQPlay.atrium.features.modules.exploit;

import me._3000IQPlay.atrium.event.events.MoveEvent;
import me._3000IQPlay.atrium.event.events.PacketEvent;
import me._3000IQPlay.atrium.features.modules.Module;
import me._3000IQPlay.atrium.features.setting.Setting;
import me._3000IQPlay.atrium.features.command.Command;
import net.minecraft.item.*;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.util.EnumHand;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class FastProjectiles
        extends Module {
    public Setting<Boolean> Bows = this.register(new Setting<>("Bows", true));
    public Setting<Boolean> pearls = this.register(new Setting<>("Pearls", false));
    public Setting<Boolean> eggs = this.register(new Setting<>("Eggs", false));
    public Setting<Boolean> snowballs = this.register(new Setting<>("SnowBallz", false));
    public Setting<Integer> Timeout = this.register(new Setting<>("Timeout", 100, 100, 20000));
    public Setting<Integer> spoofs = this.register(new Setting<>("Spoofs", 100, 1, 400));
    public Setting<Boolean> cancelMotion = this.register(new Setting<>("Cancel Motion", false));
    public Setting<Boolean> debug = this.register(new Setting<>("Debug", false));
    public Setting<Boolean> bypass = this.register(new Setting<>("Bypass", false));
    private boolean shooting;
    private long lastShootTime;
    private boolean shouldCancelMotion = false;

    public FastProjectiles() {
        super("FastProjectiles", "Swagger bow module", Category.EXPLOIT, true, false, false);
    }

    @Override
    public void onEnable() {
        if (this.isEnabled()) {
            shooting = false;
            lastShootTime = System.currentTimeMillis();
        }
    }

    @SubscribeEvent
    public void onPacketSend(PacketEvent.Send event) {
        if (event.getStage() != 0) return;

        if (event.getPacket() instanceof CPacketPlayerDigging) {
            CPacketPlayerDigging packet = (CPacketPlayerDigging) event.getPacket();

            if (packet.getAction() == CPacketPlayerDigging.Action.RELEASE_USE_ITEM) {
                ItemStack handStack = mc.player.getHeldItem(EnumHand.MAIN_HAND);

                if (!handStack.isEmpty() && handStack.getItem() != null && handStack.getItem() instanceof ItemBow && Bows.getValue()) {
                    doSpoofs();
                    if (debug.getValue()) Command.sendMessage("Trying to spoof");
                }
            }

        } else if (event.getPacket() instanceof CPacketPlayerTryUseItem) {
            CPacketPlayerTryUseItem packet2 = (CPacketPlayerTryUseItem) event.getPacket();

            if (packet2.getHand() == EnumHand.MAIN_HAND) {
                ItemStack handStack = mc.player.getHeldItem(EnumHand.MAIN_HAND);

                if (!handStack.isEmpty() && handStack.getItem() != null) {
                    if (handStack.getItem() instanceof ItemEgg && eggs.getValue()) {
                        doSpoofs();
                    } else if (handStack.getItem() instanceof ItemEnderPearl && pearls.getValue()) {
                        doSpoofs();
                    } else if (handStack.getItem() instanceof ItemSnowball && snowballs.getValue()) {
                        doSpoofs();
                    }
                }
            }
        }
    }

    private void doSpoofs() {
        if (System.currentTimeMillis() - lastShootTime >= Timeout.getValue()) {
            shooting = true;
            lastShootTime = System.currentTimeMillis();

            mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING));

            if (cancelMotion.getValue()) {
                shouldCancelMotion = true;
            }

            mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING));

            for (int index = 0; index < spoofs.getValue(); ++index) {
                if (bypass.getValue()) {
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX + 1e-10, mc.player.posY + 1e-10, mc.player.posZ + 1e-10, false));
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX - 1e-10, mc.player.posY - 1e-10, mc.player.posZ - 1e-10, true));
                } else {
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX - 1e-10, mc.player.posY - 1e-10, mc.player.posZ - 1e-10, true));
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX + 1e-10, mc.player.posY + 1e-10, mc.player.posZ + 1e-10, false));
                }

            }

            shouldCancelMotion = false;
            if (debug.getValue()) Command.sendMessage("Spoofed");

            shooting = false;
        }
    }

    @SubscribeEvent(priority = EventPriority.HIGH)
    public void onMove(MoveEvent event) {
        event.setCanceled(shouldCancelMotion);
    }
}
